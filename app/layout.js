'use client'
import NavBar from '@/components/NavBar'
import Provider from './Provider'
import './globals.css'
import { useEffect,useState } from 'react'
import { UserLocationContext } from '@/context/UserLocationContext'
import { SelectedPlace } from '@/context/SelectedPlace'
import { DarkMode } from '@/context/DarkMode'
import { Category } from '@/context/Category'


const metadata = {
  title: 'Spot Seeker',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {

  const [userLocation,setUserLocation]=useState([])
  const [selectedPlace,setSelectedPlace]=useState([])
  const [isToggled, setIsToggled] = useState(false);
  const [category,setCategory]=useState();

  function handleCategoryChange(val) {
    setCategory(val);
  }  

  const handleToggle = () => {
    setIsToggled(!isToggled);
  };

  useEffect(()=>{
    getUserLocation()
  },[])

    const getUserLocation=()=>{
      navigator.geolocation.getCurrentPosition(function(pos){
          console.log(pos)
          setUserLocation({
            lat:pos.coords.latitude,
            lng:pos.coords.longitude
          })
      })
    }

  return (
    <html lang="en">
      <body className={`${isToggled ? 'bg-purple-900':""}`}>
        <Provider>
          <Category.Provider value={{category,handleCategoryChange}}>
          <DarkMode.Provider value={{isToggled,handleToggle}}>
          <SelectedPlace.Provider value={{selectedPlace,setSelectedPlace}}>
          <UserLocationContext.Provider value={{userLocation,setUserLocation}}>
          <NavBar/>
            {children}
          </UserLocationContext.Provider>
          </SelectedPlace.Provider>
          </DarkMode.Provider>
          </Category.Provider>
        </Provider>
        </body>
    </html>
  )
}